name: Deploy to VPS

on:
  push:
    branches:
      - main   # Auto deploy kalau ada push ke branch main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create build environment file
        run: |
          # Create .env.local for build (secrets are masked in logs)
          cat > .env.local << EOF
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          EOF

      - name: Build Next.js app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Prepare deployment files
        run: |
          mkdir -p deploy
          # Copy Next.js standalone output (much smaller!)
          cp -r .next/standalone/. deploy/
          # Copy static files
          cp -r .next/static deploy/.next/static
          cp -r public deploy/public
          # Create minimal Dockerfile for faster builds
          cat > deploy/Dockerfile <<'EOF'
          FROM node:20-alpine
          WORKDIR /app
          # Copy pre-built standalone output
          COPY . .
          EXPOSE 3000
          ENV NODE_ENV=production
          ENV PORT=3000
          ENV HOSTNAME="0.0.0.0"
          # Standalone output includes server.js
          CMD ["node", "server.js"]
          EOF

      - name: Stop existing containers on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Stop existing containers if running
            if [ -d "/root/project/tekna-company-profile" ]; then
              cd /root/project/tekna-company-profile
              docker compose down || true
            fi

      - name: Copy build artifacts to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy/*"
          target: "/root/project/tekna-company-profile"
          strip_components: 1
          rm: true

      - name: Start containers on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          command_timeout: 10m
          script: |
            cd /root/project/tekna-company-profile
            # Build new image (just copy files - much faster!)
            docker compose build --no-cache
            # Start container
            docker compose up -d
            # Clean up old images
            docker image prune -af
